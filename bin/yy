#! /usr/bin/env node
const chalk = require('chalk')
const program = require("commander");

// 1、配置可执行命令 commander

// 核心功能：创建项目 更改配置文件 ui界面@vue/ui
program
  // 万一重名了？
  .command("create <app-name>")
  .description("create a new project")
  .option("-f, --force", "overwrite target directory if it exists")
  .action((name, options, cmd) => {
    // 调用create模块取创建
    require('../lib/create')(name, options)
    // console.log(name, options);
    // console.log(name, cleanArgs(cmd)); // 需要提取cmd中的属性
  });

program.on('--help', function () {
  console.log()
  console.log(`Run ${chalk.cyan('yy-cli <command> --help')} show details`)
  console.log()
})

// vue config --get a
// vue config --set a 1 =》配置文件中
// vue config -0
program
  .command("config [value]") // 命令后面接了参数
  .description("inspect and modify the config")
  .option("-g, --get <path>", "get value from option") // <>参数
  .option("-s, --set <path> <value>")
  .option("-d, --delete <path>", "delete option from config")
  .action((name, options, cmd) => {
    console.log(name, options);
  });

program
  .command("ui")
  .description("start and open yy-cli ui")
  .option("-p, --port <port>", "Port used for the UI server")
  .action((options) => {
    console.log(options);
  });

program
  .version(`yy-cli ${require("../package.json").version}`) // 版本号
  .usage(`<command> [option]`);
// 解析用户执行命令传入的参数
program.parse(process.argv);
// 2、要实现脚手架，需要先实现一个交互的功能 inquirer
// 3、将模板下载下来 download-git-repo
// 4、根据用户选择动态生成内容 metalsmith

// function cleanArgs(cmd) {
//   console.log(cmd)
//   const args = {};
//   cmd.options.forEach((o) => {
//     const key = o.long.slice(2);
//     if (cmd[key]) args[key] = cmd[ke];
//   });
//   return args;
// }
